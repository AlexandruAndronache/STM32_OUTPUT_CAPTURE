
STM32_OUTPUT_COMPARE_GENERATED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003164  08003164  00004164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d0  080031d0  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d8  080031d8  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d8  080031d8  000041d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031dc  080031dc  000041dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080031e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  0800324c  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800324c  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c344  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a82  00000000  00000000  000113e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00012e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008dd  00000000  00000000  000139b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162a8  00000000  00000000  0001428d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1a6  00000000  00000000  0002a535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d588  00000000  00000000  000376db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4c63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  000c4ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c8174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800314c 	.word	0x0800314c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800314c 	.word	0x0800314c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0


  HAL_Init();
 8000584:	f000 fb02 	bl	8000b8c <HAL_Init>


  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000588:	2032      	movs	r0, #50	@ 0x32
 800058a:	f000 f8f9 	bl	8000780 <SystemClock_Config_HSE>

  TIMER2_INIT();
 800058e:	f000 f98f 	bl	80008b0 <TIMER2_INIT>

  if (HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000592:	2100      	movs	r1, #0
 8000594:	4815      	ldr	r0, [pc, #84]	@ (80005ec <main+0x6c>)
 8000596:	f001 faeb 	bl	8001b70 <HAL_TIM_OC_Start_IT>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <main+0x24>
  {
	  Error_Handler();
 80005a0:	f000 f9e6 	bl	8000970 <Error_Handler>
  }

  if (HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80005a4:	2104      	movs	r1, #4
 80005a6:	4811      	ldr	r0, [pc, #68]	@ (80005ec <main+0x6c>)
 80005a8:	f001 fae2 	bl	8001b70 <HAL_TIM_OC_Start_IT>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <main+0x36>
  {
	  Error_Handler();
 80005b2:	f000 f9dd 	bl	8000970 <Error_Handler>
  }


  if (HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 80005b6:	2108      	movs	r1, #8
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <main+0x6c>)
 80005ba:	f001 fad9 	bl	8001b70 <HAL_TIM_OC_Start_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x48>
  {
	  Error_Handler();
 80005c4:	f000 f9d4 	bl	8000970 <Error_Handler>
  }


  if (HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 80005c8:	210c      	movs	r1, #12
 80005ca:	4808      	ldr	r0, [pc, #32]	@ (80005ec <main+0x6c>)
 80005cc:	f001 fad0 	bl	8001b70 <HAL_TIM_OC_Start_IT>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <main+0x5a>
  {
	  Error_Handler();
 80005d6:	f000 f9cb 	bl	8000970 <Error_Handler>
  }

  HAL_UART_Transmit(&huart2, (uint8_t *)("Hello"), strlen("Hello"), HAL_MAX_DELAY);
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	2205      	movs	r2, #5
 80005e0:	4903      	ldr	r1, [pc, #12]	@ (80005f0 <main+0x70>)
 80005e2:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <main+0x74>)
 80005e4:	f001 ffcb 	bl	800257e <HAL_UART_Transmit>




  while (1);
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x68>
 80005ec:	20000088 	.word	0x20000088
 80005f0:	08003164 	.word	0x08003164
 80005f4:	200000d0 	.word	0x200000d0

080005f8 <HAL_TIM_OC_DelayElapsedCallback>:
}



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	@ 0x70
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	char log[100] = "Hello";
 8000600:	4a57      	ldr	r2, [pc, #348]	@ (8000760 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	8892      	ldrh	r2, [r2, #4]
 800060c:	809a      	strh	r2, [r3, #4]
 800060e:	f107 0312 	add.w	r3, r7, #18
 8000612:	225e      	movs	r2, #94	@ 0x5e
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f918 	bl	800284c <memset>

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7f1b      	ldrb	r3, [r3, #28]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d11d      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x68>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f001 fcec 	bl	8002004 <HAL_TIM_ReadCapturedValue>
 800062c:	4603      	mov	r3, r0
 800062e:	4a4d      	ldr	r2, [pc, #308]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000630:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content + pulse1_value);
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	4b4c      	ldr	r3, [pc, #304]	@ (8000768 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	440a      	add	r2, r1
 8000640:	635a      	str	r2, [r3, #52]	@ 0x34
		sprintf(log, "Value of ccr_content is: %lu\r\n", ccr_content);
 8000642:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4948      	ldr	r1, [pc, #288]	@ (800076c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f8dd 	bl	800280c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)("Hello"), strlen("Hello"), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2205      	movs	r2, #5
 8000658:	4941      	ldr	r1, [pc, #260]	@ (8000760 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 800065a:	4845      	ldr	r0, [pc, #276]	@ (8000770 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 800065c:	f001 ff8f 	bl	800257e <HAL_UART_Transmit>
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7f1b      	ldrb	r3, [r3, #28]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d124      	bne.n	80006b2 <HAL_TIM_OC_DelayElapsedCallback+0xba>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f001 fcca 	bl	8002004 <HAL_TIM_ReadCapturedValue>
 8000670:	4603      	mov	r3, r0
 8000672:	4a3c      	ldr	r2, [pc, #240]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000674:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content + pulse2_value);
 8000676:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	440a      	add	r2, r1
 8000684:	639a      	str	r2, [r3, #56]	@ 0x38

		sprintf(log, "Value of ccr_content is: %lu\r\n", ccr_content);
 8000686:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4937      	ldr	r1, [pc, #220]	@ (800076c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f8bb 	bl	800280c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fda0 	bl	80001e0 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f107 010c 	add.w	r1, r7, #12
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	4830      	ldr	r0, [pc, #192]	@ (8000770 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 80006ae:	f001 ff66 	bl	800257e <HAL_UART_Transmit>
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7f1b      	ldrb	r3, [r3, #28]
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d124      	bne.n	8000704 <HAL_TIM_OC_DelayElapsedCallback+0x10c>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f001 fca1 	bl	8002004 <HAL_TIM_ReadCapturedValue>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 80006c6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content + pulse3_value);
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	440a      	add	r2, r1
 80006d6:	63da      	str	r2, [r3, #60]	@ 0x3c
		sprintf(log, "Value of ccr_content is: %lu\r\n", ccr_content);
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4922      	ldr	r1, [pc, #136]	@ (800076c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f892 	bl	800280c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd77 	bl	80001e0 <strlen>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f107 010c 	add.w	r1, r7, #12
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	481c      	ldr	r0, [pc, #112]	@ (8000770 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000700:	f001 ff3d 	bl	800257e <HAL_UART_Transmit>
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7f1b      	ldrb	r3, [r3, #28]
 8000708:	2b08      	cmp	r3, #8
 800070a:	d124      	bne.n	8000756 <HAL_TIM_OC_DelayElapsedCallback+0x15e>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f001 fc78 	bl	8002004 <HAL_TIM_ReadCapturedValue>
 8000714:	4603      	mov	r3, r0
 8000716:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000718:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content + pulse4_value);
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 800071c:	6819      	ldr	r1, [r3, #0]
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	440a      	add	r2, r1
 8000728:	641a      	str	r2, [r3, #64]	@ 0x40
		sprintf(log, "Value of ccr_content is: %lu\r\n", ccr_content);
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	490e      	ldr	r1, [pc, #56]	@ (800076c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000734:	4618      	mov	r0, r3
 8000736:	f002 f869 	bl	800280c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd4e 	bl	80001e0 <strlen>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	f107 010c 	add.w	r1, r7, #12
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	4807      	ldr	r0, [pc, #28]	@ (8000770 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000752:	f001 ff14 	bl	800257e <HAL_UART_Transmit>
	}

}
 8000756:	bf00      	nop
 8000758:	3770      	adds	r7, #112	@ 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	08003164 	.word	0x08003164
 8000764:	20000118 	.word	0x20000118
 8000768:	20000000 	.word	0x20000000
 800076c:	0800316c 	.word	0x0800316c
 8000770:	200000d0 	.word	0x200000d0
 8000774:	20000004 	.word	0x20000004
 8000778:	20000008 	.word	0x20000008
 800077c:	2000000c 	.word	0x2000000c

08000780 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
	{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	@ 0x58
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
		RCC_OscInitTypeDef Osc_Init;
		RCC_ClkInitTypeDef Clock_Init;
	    uint8_t flash_latency=0;
 800078a:	2300      	movs	r3, #0
 800078c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 8000790:	2307      	movs	r3, #7
 8000792:	623b      	str	r3, [r7, #32]
		Osc_Init.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
		Osc_Init.LSEState = RCC_LSE_ON;
 800079a:	2301      	movs	r3, #1
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
		Osc_Init.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	@ 0x38
		Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

		switch(clock_freq)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b78      	cmp	r3, #120	@ 0x78
 80007b0:	d034      	beq.n	800081c <SystemClock_Config_HSE+0x9c>
 80007b2:	2b78      	cmp	r3, #120	@ 0x78
 80007b4:	dc76      	bgt.n	80008a4 <SystemClock_Config_HSE+0x124>
 80007b6:	2b32      	cmp	r3, #50	@ 0x32
 80007b8:	d002      	beq.n	80007c0 <SystemClock_Config_HSE+0x40>
 80007ba:	2b50      	cmp	r3, #80	@ 0x50
 80007bc:	d017      	beq.n	80007ee <SystemClock_Config_HSE+0x6e>
			  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	          flash_latency = 3;
		     break;

		  default:
		   return ;
 80007be:	e071      	b.n	80008a4 <SystemClock_Config_HSE+0x124>
			  Osc_Init.PLL.PLLM = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	643b      	str	r3, [r7, #64]	@ 0x40
			  Osc_Init.PLL.PLLN = 50;
 80007c4:	2332      	movs	r3, #50	@ 0x32
 80007c6:	647b      	str	r3, [r7, #68]	@ 0x44
			  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
			  Osc_Init.PLL.PLLQ = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
			  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
			  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
			  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
			  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]
			  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
	          flash_latency = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		     break;
 80007ec:	e02e      	b.n	800084c <SystemClock_Config_HSE+0xcc>
			  Osc_Init.PLL.PLLM = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
			  Osc_Init.PLL.PLLN = 84;
 80007f2:	2354      	movs	r3, #84	@ 0x54
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
			  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
			  Osc_Init.PLL.PLLQ = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
			  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
			  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
			  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
			  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	61bb      	str	r3, [r7, #24]
			  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
	          flash_latency = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		     break;
 800081a:	e017      	b.n	800084c <SystemClock_Config_HSE+0xcc>
			  Osc_Init.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
			  Osc_Init.PLL.PLLN = 120;
 8000820:	2378      	movs	r3, #120	@ 0x78
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
			  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
			  Osc_Init.PLL.PLLQ = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
			  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
			  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
			  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000838:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083c:	61bb      	str	r3, [r7, #24]
			  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	61fb      	str	r3, [r7, #28]
	          flash_latency = 3;
 8000844:	2303      	movs	r3, #3
 8000846:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		     break;
 800084a:	bf00      	nop
		 }

			if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fccd 	bl	80011f0 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config_HSE+0xe0>
		{
				Error_Handler();
 800085c:	f000 f888 	bl	8000970 <Error_Handler>
		}



		if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000860:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 ff38 	bl	80016e0 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config_HSE+0xfa>
		{
			Error_Handler();
 8000876:	f000 f87b 	bl	8000970 <Error_Handler>
		}


		/*Configure the systick timer interrupt frequency (for every 1 ms) */
		uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800087a:	f001 f91d 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 800087e:	6538      	str	r0, [r7, #80]	@ 0x50
		HAL_SYSTICK_Config(hclk_freq/1000);
 8000880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <SystemClock_Config_HSE+0x12c>)
 8000884:	fba2 2303 	umull	r2, r3, r2, r3
 8000888:	099b      	lsrs	r3, r3, #6
 800088a:	4618      	mov	r0, r3
 800088c:	f000 faf5 	bl	8000e7a <HAL_SYSTICK_Config>

		/**Configure the Systick
		*/
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000890:	2004      	movs	r0, #4
 8000892:	f000 faff 	bl	8000e94 <HAL_SYSTICK_CLKSourceConfig>

		/* SysTick_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f04f 30ff 	mov.w	r0, #4294967295
 800089e:	f000 fac2 	bl	8000e26 <HAL_NVIC_SetPriority>
 80008a2:	e000      	b.n	80008a6 <SystemClock_Config_HSE+0x126>
		   return ;
 80008a4:	bf00      	nop



	 }
 80008a6:	3758      	adds	r7, #88	@ 0x58
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	10624dd3 	.word	0x10624dd3

080008b0 <TIMER2_INIT>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void TIMER2_INIT(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef tim2OC_init;

	htim2.Instance = TIM2;
 80008b6:	4b29      	ldr	r3, [pc, #164]	@ (800095c <TIMER2_INIT+0xac>)
 80008b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Period = 0xFFFF;
 80008be:	4b27      	ldr	r3, [pc, #156]	@ (800095c <TIMER2_INIT+0xac>)
 80008c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c4:	60da      	str	r2, [r3, #12]
	htim2.Init.Prescaler = 1; //25 Mhz
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <TIMER2_INIT+0xac>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	605a      	str	r2, [r3, #4]
	//htim2.Init.Prescaler = 50; //1 Mhz

	if(HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008cc:	4823      	ldr	r0, [pc, #140]	@ (800095c <TIMER2_INIT+0xac>)
 80008ce:	f001 f8ff 	bl	8001ad0 <HAL_TIM_OC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <TIMER2_INIT+0x2c>
	{
		Error_Handler();
 80008d8:	f000 f84a 	bl	8000970 <Error_Handler>
	}

	tim2OC_init.OCMode = TIM_OCMODE_TOGGLE;
 80008dc:	2330      	movs	r3, #48	@ 0x30
 80008de:	607b      	str	r3, [r7, #4]
	tim2OC_init.Pulse = pulse1_value;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <TIMER2_INIT+0xb0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60bb      	str	r3, [r7, #8]
	tim2OC_init.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Controls output control block
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]

	if(HAL_TIM_OC_ConfigChannel(&htim2, &tim2OC_init, TIM_CHANNEL_1) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	481a      	ldr	r0, [pc, #104]	@ (800095c <TIMER2_INIT+0xac>)
 80008f2:	f001 fb2b 	bl	8001f4c <HAL_TIM_OC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <TIMER2_INIT+0x50>
	{
		Error_Handler();
 80008fc:	f000 f838 	bl	8000970 <Error_Handler>
	}

	tim2OC_init.Pulse = pulse2_value;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <TIMER2_INIT+0xb4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htim2, &tim2OC_init, TIM_CHANNEL_1) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4813      	ldr	r0, [pc, #76]	@ (800095c <TIMER2_INIT+0xac>)
 800090e:	f001 fb1d 	bl	8001f4c <HAL_TIM_OC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <TIMER2_INIT+0x6c>
	{
		Error_Handler();
 8000918:	f000 f82a 	bl	8000970 <Error_Handler>
	}

	tim2OC_init.Pulse = pulse3_value;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <TIMER2_INIT+0xb8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htim2, &tim2OC_init, TIM_CHANNEL_1) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <TIMER2_INIT+0xac>)
 800092a:	f001 fb0f 	bl	8001f4c <HAL_TIM_OC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <TIMER2_INIT+0x88>
	{
		Error_Handler();
 8000934:	f000 f81c 	bl	8000970 <Error_Handler>
	}

	tim2OC_init.Pulse = pulse4_value;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <TIMER2_INIT+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htim2, &tim2OC_init, TIM_CHANNEL_1) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <TIMER2_INIT+0xac>)
 8000946:	f001 fb01 	bl	8001f4c <HAL_TIM_OC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <TIMER2_INIT+0xa4>
	{
		Error_Handler();
 8000950:	f000 f80e 	bl	8000970 <Error_Handler>
	}
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000088 	.word	0x20000088
 8000960:	20000000 	.word	0x20000000
 8000964:	20000004 	.word	0x20000004
 8000968:	20000008 	.word	0x20000008
 800096c:	2000000c 	.word	0x2000000c

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 fa45 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <HAL_MspInit+0x40>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <HAL_MspInit+0x40>)
 800098c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000990:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	f06f 000b 	mvn.w	r0, #11
 800099a:	f000 fa44 	bl	8000e26 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	f06f 000a 	mvn.w	r0, #10
 80009a6:	f000 fa3e 	bl	8000e26 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	f06f 0009 	mvn.w	r0, #9
 80009b2:	f000 fa38 	bl	8000e26 <HAL_NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef tim2OC_ch_gpios;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	4a22      	ldr	r2, [pc, #136]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <HAL_TIM_OC_MspInit+0xb8>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
	 /* PA0 --> TIM2_CH1
	 PA1 --> TIM2_CH2
	 PB10 --> TIM2_CH3
	 PB2 --> TIM2_CH4 */

	tim2OC_ch_gpios.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <HAL_TIM_OC_MspInit+0xbc>)
 8000a38:	f000 fa56 	bl	8000ee8 <HAL_GPIO_Init>

	tim2OC_ch_gpios.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000a3c:	f240 4304 	movw	r3, #1028	@ 0x404
 8000a40:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &tim2OC_ch_gpios);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4809      	ldr	r0, [pc, #36]	@ (8000a80 <HAL_TIM_OC_MspInit+0xc0>)
 8000a5a:	f000 fa45 	bl	8000ee8 <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	210f      	movs	r1, #15
 8000a62:	201c      	movs	r0, #28
 8000a64:	f000 f9df 	bl	8000e26 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a68:	201c      	movs	r0, #28
 8000a6a:	f000 f9f8 	bl	8000e5e <HAL_NVIC_EnableIRQ>


}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	@ 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400

08000a84 <SysTick_Handler>:

extern TIM_HandleTypeDef htim2;


void SysTick_Handler (void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a88:	f000 f8d2 	bl	8000c30 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000a8c:	f000 fa1e 	bl	8000ecc <HAL_SYSTICK_IRQHandler>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000a98:	4802      	ldr	r0, [pc, #8]	@ (8000aa4 <TIM2_IRQHandler+0x10>)
 8000a9a:	f001 f967 	bl	8001d6c <HAL_TIM_IRQHandler>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000088 	.word	0x20000088

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f001 fec0 	bl	800285c <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20018000 	.word	0x20018000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	2000011c 	.word	0x2000011c
 8000b10:	20000270 	.word	0x20000270

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f001 fe7f 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd09 	bl	8000580 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b7c:	080031e0 	.word	0x080031e0
  ldr r2, =_sbss
 8000b80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b84:	2000026c 	.word	0x2000026c

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f92b 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fedc 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f943 	bl	8000e7a <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 f90b 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000010 	.word	0x20000010
 8000c28:	20000018 	.word	0x20000018
 8000c2c:	20000014 	.word	0x20000014

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000120 	.word	0x20000120

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000120 	.word	0x20000120

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff3e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff31 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffa2 	bl	8000dcc <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d106      	bne.n	8000eb0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000eae:	e005      	b.n	8000ebc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eb6:	f023 0304 	bic.w	r3, r3, #4
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ed0:	f000 f802 	bl	8000ed8 <HAL_SYSTICK_Callback>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e159      	b.n	80011b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8148 	bne.w	80011b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a2 	beq.w	80011b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	4a56      	ldr	r2, [pc, #344]	@ (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107c:	6453      	str	r3, [r2, #68]	@ 0x44
 800107e:	4b54      	ldr	r3, [pc, #336]	@ (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a52      	ldr	r2, [pc, #328]	@ (80011d4 <HAL_GPIO_Init+0x2ec>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a49      	ldr	r2, [pc, #292]	@ (80011d8 <HAL_GPIO_Init+0x2f0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x202>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a48      	ldr	r2, [pc, #288]	@ (80011dc <HAL_GPIO_Init+0x2f4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x1fe>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a47      	ldr	r2, [pc, #284]	@ (80011e0 <HAL_GPIO_Init+0x2f8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x1fa>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a46      	ldr	r2, [pc, #280]	@ (80011e4 <HAL_GPIO_Init+0x2fc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x1f6>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a45      	ldr	r2, [pc, #276]	@ (80011e8 <HAL_GPIO_Init+0x300>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x1f2>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010da:	2307      	movs	r3, #7
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4935      	ldr	r1, [pc, #212]	@ (80011d4 <HAL_GPIO_Init+0x2ec>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b38      	ldr	r3, [pc, #224]	@ (80011ec <HAL_GPIO_Init+0x304>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a2f      	ldr	r2, [pc, #188]	@ (80011ec <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <HAL_GPIO_Init+0x304>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <HAL_GPIO_Init+0x304>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001182:	4a1a      	ldr	r2, [pc, #104]	@ (80011ec <HAL_GPIO_Init+0x304>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_GPIO_Init+0x304>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_GPIO_Init+0x304>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f aea2 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e267      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	4b88      	ldr	r3, [pc, #544]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b85      	ldr	r3, [pc, #532]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b82      	ldr	r3, [pc, #520]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b7e      	ldr	r3, [pc, #504]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e242      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4b76      	ldr	r3, [pc, #472]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a75      	ldr	r2, [pc, #468]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b70      	ldr	r3, [pc, #448]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6f      	ldr	r2, [pc, #444]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6d      	ldr	r3, [pc, #436]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6c      	ldr	r2, [pc, #432]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4b69      	ldr	r3, [pc, #420]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a68      	ldr	r2, [pc, #416]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b66      	ldr	r3, [pc, #408]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcd6 	bl	8000c58 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fcd2 	bl	8000c58 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	@ 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e207      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcc2 	bl	8000c58 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcbe 	bl	8000c58 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	@ 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1f3      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c7      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4937      	ldr	r1, [pc, #220]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <HAL_RCC_OscConfig+0x244>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fc77 	bl	8000c58 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc73 	bl	8000c58 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a8      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4925      	ldr	r1, [pc, #148]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_RCC_OscConfig+0x244>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc56 	bl	8000c58 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc52 	bl	8000c58 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e187      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d036      	beq.n	8001448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_RCC_OscConfig+0x248>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff fc36 	bl	8000c58 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc32 	bl	8000c58 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e167      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
 800140e:	e01b      	b.n	8001448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_RCC_OscConfig+0x248>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc1f 	bl	8000c58 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00e      	b.n	800143c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fc1b 	bl	8000c58 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d907      	bls.n	800143c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e150      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ea      	bne.n	800141e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8097 	beq.w	8001584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b81      	ldr	r3, [pc, #516]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b7d      	ldr	r3, [pc, #500]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a7c      	ldr	r2, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b7a      	ldr	r3, [pc, #488]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b77      	ldr	r3, [pc, #476]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a73      	ldr	r2, [pc, #460]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbdb 	bl	8000c58 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fbd7 	bl	8000c58 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e10c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x2ea>
 80014cc:	4b64      	ldr	r3, [pc, #400]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d0:	4a63      	ldr	r2, [pc, #396]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x30c>
 80014e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001500:	4a57      	ldr	r2, [pc, #348]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	@ 0x70
 8001508:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150c:	4a54      	ldr	r2, [pc, #336]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d015      	beq.n	8001548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fb9c 	bl	8000c58 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001524:	f7ff fb98 	bl	8000c58 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0cb      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ee      	beq.n	8001524 <HAL_RCC_OscConfig+0x334>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fb86 	bl	8000c58 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fb82 	bl	8000c58 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0b5      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a38      	ldr	r2, [pc, #224]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a1 	beq.w	80016d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b08      	cmp	r3, #8
 8001598:	d05c      	beq.n	8001654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d141      	bne.n	8001626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb56 	bl	8000c58 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fb52 	bl	8000c58 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e087      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	491b      	ldr	r1, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb2b 	bl	8000c58 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb27 	bl	8000c58 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e05c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x416>
 8001624:	e054      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb14 	bl	8000c58 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb10 	bl	8000c58 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e045      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
 8001652:	e03d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e038      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000
 8001668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x4ec>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d028      	beq.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d121      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa42 	bl	8000c58 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa3e 	bl	8000c58 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4602      	mov	r2, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	490a      	ldr	r1, [pc, #40]	@ (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9a2 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	0800318c 	.word	0x0800318c
 80018a4:	20000010 	.word	0x20000010
 80018a8:	20000014 	.word	0x20000014

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b094      	sub	sp, #80	@ 0x50
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80018b8:	2300      	movs	r3, #0
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b79      	ldr	r3, [pc, #484]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d00d      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f200 80e1 	bhi.w	8001a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018de:	e0db      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80018e4:	e0db      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b73      	ldr	r3, [pc, #460]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ea:	e0d8      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f6:	4b6d      	ldr	r3, [pc, #436]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d063      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b6a      	ldr	r3, [pc, #424]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800190c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800190e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	@ 0x34
 800191a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800191e:	4622      	mov	r2, r4
 8001920:	462b      	mov	r3, r5
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0159      	lsls	r1, r3, #5
 800192c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001930:	0150      	lsls	r0, r2, #5
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4621      	mov	r1, r4
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	6139      	str	r1, [r7, #16]
 800193c:	4629      	mov	r1, r5
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001950:	4659      	mov	r1, fp
 8001952:	018b      	lsls	r3, r1, #6
 8001954:	4651      	mov	r1, sl
 8001956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195a:	4651      	mov	r1, sl
 800195c:	018a      	lsls	r2, r1, #6
 800195e:	4651      	mov	r1, sl
 8001960:	ebb2 0801 	subs.w	r8, r2, r1
 8001964:	4659      	mov	r1, fp
 8001966:	eb63 0901 	sbc.w	r9, r3, r1
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800197e:	4690      	mov	r8, r2
 8001980:	4699      	mov	r9, r3
 8001982:	4623      	mov	r3, r4
 8001984:	eb18 0303 	adds.w	r3, r8, r3
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	462b      	mov	r3, r5
 800198c:	eb49 0303 	adc.w	r3, r9, r3
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800199e:	4629      	mov	r1, r5
 80019a0:	024b      	lsls	r3, r1, #9
 80019a2:	4621      	mov	r1, r4
 80019a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019a8:	4621      	mov	r1, r4
 80019aa:	024a      	lsls	r2, r1, #9
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019b2:	2200      	movs	r2, #0
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019bc:	f7fe fc68 	bl	8000290 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4613      	mov	r3, r2
 80019c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019c8:	e058      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	4611      	mov	r1, r2
 80019d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0159      	lsls	r1, r3, #5
 80019f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f6:	0150      	lsls	r0, r2, #5
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4641      	mov	r1, r8
 80019fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a02:	4649      	mov	r1, r9
 8001a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a20:	eb63 050b 	sbc.w	r5, r3, fp
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	00eb      	lsls	r3, r5, #3
 8001a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a32:	00e2      	lsls	r2, r4, #3
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4643      	mov	r3, r8
 8001a3a:	18e3      	adds	r3, r4, r3
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	464b      	mov	r3, r9
 8001a40:	eb45 0303 	adc.w	r3, r5, r3
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a52:	4629      	mov	r1, r5
 8001a54:	028b      	lsls	r3, r1, #10
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	028a      	lsls	r2, r1, #10
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	61fa      	str	r2, [r7, #28]
 8001a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a70:	f7fe fc0e 	bl	8000290 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3750      	adds	r7, #80	@ 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_RCC_GetHCLKFreq+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000010 	.word	0x20000010

08001ad0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e041      	b.n	8001b66 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe ff62 	bl	80009c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f000 fae4 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_TIM_OC_Start_IT+0x28>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e022      	b.n	8001bde <HAL_TIM_OC_Start_IT+0x6e>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d109      	bne.n	8001bb2 <HAL_TIM_OC_Start_IT+0x42>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e015      	b.n	8001bde <HAL_TIM_OC_Start_IT+0x6e>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d109      	bne.n	8001bcc <HAL_TIM_OC_Start_IT+0x5c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e008      	b.n	8001bde <HAL_TIM_OC_Start_IT+0x6e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0b3      	b.n	8001d4e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_TIM_OC_Start_IT+0x86>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf4:	e013      	b.n	8001c1e <HAL_TIM_OC_Start_IT+0xae>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d104      	bne.n	8001c06 <HAL_TIM_OC_Start_IT+0x96>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c04:	e00b      	b.n	8001c1e <HAL_TIM_OC_Start_IT+0xae>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d104      	bne.n	8001c16 <HAL_TIM_OC_Start_IT+0xa6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c14:	e003      	b.n	8001c1e <HAL_TIM_OC_Start_IT+0xae>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d841      	bhi.n	8001ca8 <HAL_TIM_OC_Start_IT+0x138>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <HAL_TIM_OC_Start_IT+0xbc>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c61 	.word	0x08001c61
 8001c30:	08001ca9 	.word	0x08001ca9
 8001c34:	08001ca9 	.word	0x08001ca9
 8001c38:	08001ca9 	.word	0x08001ca9
 8001c3c:	08001c73 	.word	0x08001c73
 8001c40:	08001ca9 	.word	0x08001ca9
 8001c44:	08001ca9 	.word	0x08001ca9
 8001c48:	08001ca9 	.word	0x08001ca9
 8001c4c:	08001c85 	.word	0x08001c85
 8001c50:	08001ca9 	.word	0x08001ca9
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001c97 	.word	0x08001c97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0202 	orr.w	r2, r2, #2
 8001c6e:	60da      	str	r2, [r3, #12]
      break;
 8001c70:	e01d      	b.n	8001cae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0204 	orr.w	r2, r2, #4
 8001c80:	60da      	str	r2, [r3, #12]
      break;
 8001c82:	e014      	b.n	8001cae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0208 	orr.w	r2, r2, #8
 8001c92:	60da      	str	r2, [r3, #12]
      break;
 8001c94:	e00b      	b.n	8001cae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0210 	orr.w	r2, r2, #16
 8001ca4:	60da      	str	r2, [r3, #12]
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	bf00      	nop
  }

  if (status == HAL_OK)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d14b      	bne.n	8001d4c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fc25 	bl	800250c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a24      	ldr	r2, [pc, #144]	@ (8001d58 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cda:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d58 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_OC_Start_IT+0x1a8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_OC_Start_IT+0x1a8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_TIM_OC_Start_IT+0x1ec>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_OC_Start_IT+0x1a8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_TIM_OC_Start_IT+0x1f0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a16      	ldr	r2, [pc, #88]	@ (8001d64 <HAL_TIM_OC_Start_IT+0x1f4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_TIM_OC_Start_IT+0x1f8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d010      	beq.n	8001d4c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e007      	b.n	8001d4c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40000c00 	.word	0x40000c00
 8001d68:	40014000 	.word	0x40014000

08001d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0202 	mvn.w	r2, #2
 8001da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f972 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fc1a 	bl	80005f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f975 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0204 	mvn.w	r2, #4
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f94c 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fbf4 	bl	80005f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f94f 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0208 	mvn.w	r2, #8
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f926 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fbce 	bl	80005f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f929 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0210 	mvn.w	r2, #16
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f900 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fba8 	bl	80005f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f903 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0201 	mvn.w	r2, #1
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8da 	bl	800208c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fb37 	bl	800256a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8d4 	bl	80020c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0220 	mvn.w	r2, #32
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fb09 	bl	8002556 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e048      	b.n	8001ffc <HAL_TIM_OC_ConfigChannel+0xb0>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d839      	bhi.n	8001fec <HAL_TIM_OC_ConfigChannel+0xa0>
 8001f78:	a201      	add	r2, pc, #4	@ (adr r2, 8001f80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001fb5 	.word	0x08001fb5
 8001f84:	08001fed 	.word	0x08001fed
 8001f88:	08001fed 	.word	0x08001fed
 8001f8c:	08001fed 	.word	0x08001fed
 8001f90:	08001fc3 	.word	0x08001fc3
 8001f94:	08001fed 	.word	0x08001fed
 8001f98:	08001fed 	.word	0x08001fed
 8001f9c:	08001fed 	.word	0x08001fed
 8001fa0:	08001fd1 	.word	0x08001fd1
 8001fa4:	08001fed 	.word	0x08001fed
 8001fa8:	08001fed 	.word	0x08001fed
 8001fac:	08001fed 	.word	0x08001fed
 8001fb0:	08001fdf 	.word	0x08001fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f91a 	bl	80021f4 <TIM_OC1_SetConfig>
      break;
 8001fc0:	e017      	b.n	8001ff2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f979 	bl	80022c0 <TIM_OC2_SetConfig>
      break;
 8001fce:	e010      	b.n	8001ff2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f9de 	bl	8002398 <TIM_OC3_SetConfig>
      break;
 8001fdc:	e009      	b.n	8001ff2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fa41 	bl	800246c <TIM_OC4_SetConfig>
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]
      break;
 8001ff0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d831      	bhi.n	800207c <HAL_TIM_ReadCapturedValue+0x78>
 8002018:	a201      	add	r2, pc, #4	@ (adr r2, 8002020 <HAL_TIM_ReadCapturedValue+0x1c>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002055 	.word	0x08002055
 8002024:	0800207d 	.word	0x0800207d
 8002028:	0800207d 	.word	0x0800207d
 800202c:	0800207d 	.word	0x0800207d
 8002030:	0800205f 	.word	0x0800205f
 8002034:	0800207d 	.word	0x0800207d
 8002038:	0800207d 	.word	0x0800207d
 800203c:	0800207d 	.word	0x0800207d
 8002040:	08002069 	.word	0x08002069
 8002044:	0800207d 	.word	0x0800207d
 8002048:	0800207d 	.word	0x0800207d
 800204c:	0800207d 	.word	0x0800207d
 8002050:	08002073 	.word	0x08002073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	60fb      	str	r3, [r7, #12]

      break;
 800205c:	e00f      	b.n	800207e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002064:	60fb      	str	r3, [r7, #12]

      break;
 8002066:	e00a      	b.n	800207e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206e:	60fb      	str	r3, [r7, #12]

      break;
 8002070:	e005      	b.n	800207e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	60fb      	str	r3, [r7, #12]

      break;
 800207a:	e000      	b.n	800207e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800207c:	bf00      	nop
  }

  return tmpreg;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3a      	ldr	r2, [pc, #232]	@ (80021d8 <TIM_Base_SetConfig+0xfc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00f      	beq.n	8002114 <TIM_Base_SetConfig+0x38>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fa:	d00b      	beq.n	8002114 <TIM_Base_SetConfig+0x38>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a37      	ldr	r2, [pc, #220]	@ (80021dc <TIM_Base_SetConfig+0x100>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <TIM_Base_SetConfig+0x38>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a36      	ldr	r2, [pc, #216]	@ (80021e0 <TIM_Base_SetConfig+0x104>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_Base_SetConfig+0x38>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a35      	ldr	r2, [pc, #212]	@ (80021e4 <TIM_Base_SetConfig+0x108>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d108      	bne.n	8002126 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800211a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2b      	ldr	r2, [pc, #172]	@ (80021d8 <TIM_Base_SetConfig+0xfc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01b      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002134:	d017      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <TIM_Base_SetConfig+0x100>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <TIM_Base_SetConfig+0x104>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00f      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <TIM_Base_SetConfig+0x108>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00b      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <TIM_Base_SetConfig+0x10c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a24      	ldr	r2, [pc, #144]	@ (80021ec <TIM_Base_SetConfig+0x110>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d003      	beq.n	8002166 <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a23      	ldr	r2, [pc, #140]	@ (80021f0 <TIM_Base_SetConfig+0x114>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d108      	bne.n	8002178 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800216c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a0e      	ldr	r2, [pc, #56]	@ (80021d8 <TIM_Base_SetConfig+0xfc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d103      	bne.n	80021ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f023 0201 	bic.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
  }
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800

080021f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f023 0201 	bic.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f023 0302 	bic.w	r3, r3, #2
 800223c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <TIM_OC1_SetConfig+0xc8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d10c      	bne.n	800226a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0308 	bic.w	r3, r3, #8
 8002256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a13      	ldr	r2, [pc, #76]	@ (80022bc <TIM_OC1_SetConfig+0xc8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	621a      	str	r2, [r3, #32]
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40010000 	.word	0x40010000

080022c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f023 0210 	bic.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0320 	bic.w	r3, r3, #32
 800230a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a1e      	ldr	r2, [pc, #120]	@ (8002394 <TIM_OC2_SetConfig+0xd4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d10d      	bne.n	800233c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800233a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a15      	ldr	r2, [pc, #84]	@ (8002394 <TIM_OC2_SetConfig+0xd4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d113      	bne.n	800236c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800234a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000

08002398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <TIM_OC3_SetConfig+0xd0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10d      	bne.n	8002412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <TIM_OC3_SetConfig+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	621a      	str	r2, [r3, #32]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40010000 	.word	0x40010000

0800246c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800249a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	031b      	lsls	r3, r3, #12
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <TIM_OC4_SetConfig+0x9c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d109      	bne.n	80024e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	621a      	str	r2, [r3, #32]
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000

0800250c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2201      	movs	r2, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	43db      	mvns	r3, r3
 800252e:	401a      	ands	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b08a      	sub	sp, #40	@ 0x28
 8002582:	af02      	add	r7, sp, #8
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b20      	cmp	r3, #32
 800259c:	d175      	bne.n	800268a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_UART_Transmit+0x2c>
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06e      	b.n	800268c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2221      	movs	r2, #33	@ 0x21
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fb4c 	bl	8000c58 <HAL_GetTick>
 80025c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d6:	d108      	bne.n	80025ea <HAL_UART_Transmit+0x6c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e003      	b.n	80025f2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f2:	e02e      	b.n	8002652 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f848 	bl	8002694 <UART_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e03a      	b.n	800268c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3302      	adds	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e007      	b.n	8002644 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1cb      	bne.n	80025f4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2200      	movs	r2, #0
 8002664:	2140      	movs	r1, #64	@ 0x40
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f814 	bl	8002694 <UART_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e006      	b.n	800268c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a4:	e03b      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d037      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fad3 	bl	8000c58 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e03a      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d023      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b80      	cmp	r3, #128	@ 0x80
 80026da:	d020      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b40      	cmp	r3, #64	@ 0x40
 80026e0:	d01d      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d116      	bne.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f81d 	bl	8002746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2208      	movs	r2, #8
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	429a      	cmp	r2, r3
 800273a:	d0b4      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002746:	b480      	push	{r7}
 8002748:	b095      	sub	sp, #84	@ 0x54
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002758:	e853 3f00 	ldrex	r3, [r3]
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800276e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002774:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002776:	e841 2300 	strex	r3, r2, [r1]
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e5      	bne.n	800274e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3314      	adds	r3, #20
 8002788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	61fb      	str	r3, [r7, #28]
   return(result);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3314      	adds	r3, #20
 80027a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e5      	bne.n	8002782 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d119      	bne.n	80027f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027de:	61ba      	str	r2, [r7, #24]
 80027e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	6979      	ldr	r1, [r7, #20]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	613b      	str	r3, [r7, #16]
   return(result);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e5      	bne.n	80027be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002800:	bf00      	nop
 8002802:	3754      	adds	r7, #84	@ 0x54
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <siprintf>:
 800280c:	b40e      	push	{r1, r2, r3}
 800280e:	b500      	push	{lr}
 8002810:	b09c      	sub	sp, #112	@ 0x70
 8002812:	ab1d      	add	r3, sp, #116	@ 0x74
 8002814:	9002      	str	r0, [sp, #8]
 8002816:	9006      	str	r0, [sp, #24]
 8002818:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800281c:	4809      	ldr	r0, [pc, #36]	@ (8002844 <siprintf+0x38>)
 800281e:	9107      	str	r1, [sp, #28]
 8002820:	9104      	str	r1, [sp, #16]
 8002822:	4909      	ldr	r1, [pc, #36]	@ (8002848 <siprintf+0x3c>)
 8002824:	f853 2b04 	ldr.w	r2, [r3], #4
 8002828:	9105      	str	r1, [sp, #20]
 800282a:	6800      	ldr	r0, [r0, #0]
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	a902      	add	r1, sp, #8
 8002830:	f000 f994 	bl	8002b5c <_svfiprintf_r>
 8002834:	9b02      	ldr	r3, [sp, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	b01c      	add	sp, #112	@ 0x70
 800283c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002840:	b003      	add	sp, #12
 8002842:	4770      	bx	lr
 8002844:	2000001c 	.word	0x2000001c
 8002848:	ffff0208 	.word	0xffff0208

0800284c <memset>:
 800284c:	4402      	add	r2, r0
 800284e:	4603      	mov	r3, r0
 8002850:	4293      	cmp	r3, r2
 8002852:	d100      	bne.n	8002856 <memset+0xa>
 8002854:	4770      	bx	lr
 8002856:	f803 1b01 	strb.w	r1, [r3], #1
 800285a:	e7f9      	b.n	8002850 <memset+0x4>

0800285c <__errno>:
 800285c:	4b01      	ldr	r3, [pc, #4]	@ (8002864 <__errno+0x8>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000001c 	.word	0x2000001c

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4d0d      	ldr	r5, [pc, #52]	@ (80028a0 <__libc_init_array+0x38>)
 800286c:	4c0d      	ldr	r4, [pc, #52]	@ (80028a4 <__libc_init_array+0x3c>)
 800286e:	1b64      	subs	r4, r4, r5
 8002870:	10a4      	asrs	r4, r4, #2
 8002872:	2600      	movs	r6, #0
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	4d0b      	ldr	r5, [pc, #44]	@ (80028a8 <__libc_init_array+0x40>)
 800287a:	4c0c      	ldr	r4, [pc, #48]	@ (80028ac <__libc_init_array+0x44>)
 800287c:	f000 fc66 	bl	800314c <_init>
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	2600      	movs	r6, #0
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002890:	4798      	blx	r3
 8002892:	3601      	adds	r6, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f855 3b04 	ldr.w	r3, [r5], #4
 800289a:	4798      	blx	r3
 800289c:	3601      	adds	r6, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	080031d8 	.word	0x080031d8
 80028a4:	080031d8 	.word	0x080031d8
 80028a8:	080031d8 	.word	0x080031d8
 80028ac:	080031dc 	.word	0x080031dc

080028b0 <__retarget_lock_acquire_recursive>:
 80028b0:	4770      	bx	lr

080028b2 <__retarget_lock_release_recursive>:
 80028b2:	4770      	bx	lr

080028b4 <_free_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4605      	mov	r5, r0
 80028b8:	2900      	cmp	r1, #0
 80028ba:	d041      	beq.n	8002940 <_free_r+0x8c>
 80028bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028c0:	1f0c      	subs	r4, r1, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bfb8      	it	lt
 80028c6:	18e4      	addlt	r4, r4, r3
 80028c8:	f000 f8e0 	bl	8002a8c <__malloc_lock>
 80028cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <_free_r+0x90>)
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	b933      	cbnz	r3, 80028e0 <_free_r+0x2c>
 80028d2:	6063      	str	r3, [r4, #4]
 80028d4:	6014      	str	r4, [r2, #0]
 80028d6:	4628      	mov	r0, r5
 80028d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028dc:	f000 b8dc 	b.w	8002a98 <__malloc_unlock>
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	d908      	bls.n	80028f6 <_free_r+0x42>
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	1821      	adds	r1, r4, r0
 80028e8:	428b      	cmp	r3, r1
 80028ea:	bf01      	itttt	eq
 80028ec:	6819      	ldreq	r1, [r3, #0]
 80028ee:	685b      	ldreq	r3, [r3, #4]
 80028f0:	1809      	addeq	r1, r1, r0
 80028f2:	6021      	streq	r1, [r4, #0]
 80028f4:	e7ed      	b.n	80028d2 <_free_r+0x1e>
 80028f6:	461a      	mov	r2, r3
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b10b      	cbz	r3, 8002900 <_free_r+0x4c>
 80028fc:	42a3      	cmp	r3, r4
 80028fe:	d9fa      	bls.n	80028f6 <_free_r+0x42>
 8002900:	6811      	ldr	r1, [r2, #0]
 8002902:	1850      	adds	r0, r2, r1
 8002904:	42a0      	cmp	r0, r4
 8002906:	d10b      	bne.n	8002920 <_free_r+0x6c>
 8002908:	6820      	ldr	r0, [r4, #0]
 800290a:	4401      	add	r1, r0
 800290c:	1850      	adds	r0, r2, r1
 800290e:	4283      	cmp	r3, r0
 8002910:	6011      	str	r1, [r2, #0]
 8002912:	d1e0      	bne.n	80028d6 <_free_r+0x22>
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	6053      	str	r3, [r2, #4]
 800291a:	4408      	add	r0, r1
 800291c:	6010      	str	r0, [r2, #0]
 800291e:	e7da      	b.n	80028d6 <_free_r+0x22>
 8002920:	d902      	bls.n	8002928 <_free_r+0x74>
 8002922:	230c      	movs	r3, #12
 8002924:	602b      	str	r3, [r5, #0]
 8002926:	e7d6      	b.n	80028d6 <_free_r+0x22>
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	1821      	adds	r1, r4, r0
 800292c:	428b      	cmp	r3, r1
 800292e:	bf04      	itt	eq
 8002930:	6819      	ldreq	r1, [r3, #0]
 8002932:	685b      	ldreq	r3, [r3, #4]
 8002934:	6063      	str	r3, [r4, #4]
 8002936:	bf04      	itt	eq
 8002938:	1809      	addeq	r1, r1, r0
 800293a:	6021      	streq	r1, [r4, #0]
 800293c:	6054      	str	r4, [r2, #4]
 800293e:	e7ca      	b.n	80028d6 <_free_r+0x22>
 8002940:	bd38      	pop	{r3, r4, r5, pc}
 8002942:	bf00      	nop
 8002944:	20000268 	.word	0x20000268

08002948 <sbrk_aligned>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	4e0f      	ldr	r6, [pc, #60]	@ (8002988 <sbrk_aligned+0x40>)
 800294c:	460c      	mov	r4, r1
 800294e:	6831      	ldr	r1, [r6, #0]
 8002950:	4605      	mov	r5, r0
 8002952:	b911      	cbnz	r1, 800295a <sbrk_aligned+0x12>
 8002954:	f000 fba6 	bl	80030a4 <_sbrk_r>
 8002958:	6030      	str	r0, [r6, #0]
 800295a:	4621      	mov	r1, r4
 800295c:	4628      	mov	r0, r5
 800295e:	f000 fba1 	bl	80030a4 <_sbrk_r>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d103      	bne.n	800296e <sbrk_aligned+0x26>
 8002966:	f04f 34ff 	mov.w	r4, #4294967295
 800296a:	4620      	mov	r0, r4
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	1cc4      	adds	r4, r0, #3
 8002970:	f024 0403 	bic.w	r4, r4, #3
 8002974:	42a0      	cmp	r0, r4
 8002976:	d0f8      	beq.n	800296a <sbrk_aligned+0x22>
 8002978:	1a21      	subs	r1, r4, r0
 800297a:	4628      	mov	r0, r5
 800297c:	f000 fb92 	bl	80030a4 <_sbrk_r>
 8002980:	3001      	adds	r0, #1
 8002982:	d1f2      	bne.n	800296a <sbrk_aligned+0x22>
 8002984:	e7ef      	b.n	8002966 <sbrk_aligned+0x1e>
 8002986:	bf00      	nop
 8002988:	20000264 	.word	0x20000264

0800298c <_malloc_r>:
 800298c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002990:	1ccd      	adds	r5, r1, #3
 8002992:	f025 0503 	bic.w	r5, r5, #3
 8002996:	3508      	adds	r5, #8
 8002998:	2d0c      	cmp	r5, #12
 800299a:	bf38      	it	cc
 800299c:	250c      	movcc	r5, #12
 800299e:	2d00      	cmp	r5, #0
 80029a0:	4606      	mov	r6, r0
 80029a2:	db01      	blt.n	80029a8 <_malloc_r+0x1c>
 80029a4:	42a9      	cmp	r1, r5
 80029a6:	d904      	bls.n	80029b2 <_malloc_r+0x26>
 80029a8:	230c      	movs	r3, #12
 80029aa:	6033      	str	r3, [r6, #0]
 80029ac:	2000      	movs	r0, #0
 80029ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a88 <_malloc_r+0xfc>
 80029b6:	f000 f869 	bl	8002a8c <__malloc_lock>
 80029ba:	f8d8 3000 	ldr.w	r3, [r8]
 80029be:	461c      	mov	r4, r3
 80029c0:	bb44      	cbnz	r4, 8002a14 <_malloc_r+0x88>
 80029c2:	4629      	mov	r1, r5
 80029c4:	4630      	mov	r0, r6
 80029c6:	f7ff ffbf 	bl	8002948 <sbrk_aligned>
 80029ca:	1c43      	adds	r3, r0, #1
 80029cc:	4604      	mov	r4, r0
 80029ce:	d158      	bne.n	8002a82 <_malloc_r+0xf6>
 80029d0:	f8d8 4000 	ldr.w	r4, [r8]
 80029d4:	4627      	mov	r7, r4
 80029d6:	2f00      	cmp	r7, #0
 80029d8:	d143      	bne.n	8002a62 <_malloc_r+0xd6>
 80029da:	2c00      	cmp	r4, #0
 80029dc:	d04b      	beq.n	8002a76 <_malloc_r+0xea>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	4639      	mov	r1, r7
 80029e2:	4630      	mov	r0, r6
 80029e4:	eb04 0903 	add.w	r9, r4, r3
 80029e8:	f000 fb5c 	bl	80030a4 <_sbrk_r>
 80029ec:	4581      	cmp	r9, r0
 80029ee:	d142      	bne.n	8002a76 <_malloc_r+0xea>
 80029f0:	6821      	ldr	r1, [r4, #0]
 80029f2:	1a6d      	subs	r5, r5, r1
 80029f4:	4629      	mov	r1, r5
 80029f6:	4630      	mov	r0, r6
 80029f8:	f7ff ffa6 	bl	8002948 <sbrk_aligned>
 80029fc:	3001      	adds	r0, #1
 80029fe:	d03a      	beq.n	8002a76 <_malloc_r+0xea>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	442b      	add	r3, r5
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	f8d8 3000 	ldr.w	r3, [r8]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	bb62      	cbnz	r2, 8002a68 <_malloc_r+0xdc>
 8002a0e:	f8c8 7000 	str.w	r7, [r8]
 8002a12:	e00f      	b.n	8002a34 <_malloc_r+0xa8>
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	1b52      	subs	r2, r2, r5
 8002a18:	d420      	bmi.n	8002a5c <_malloc_r+0xd0>
 8002a1a:	2a0b      	cmp	r2, #11
 8002a1c:	d917      	bls.n	8002a4e <_malloc_r+0xc2>
 8002a1e:	1961      	adds	r1, r4, r5
 8002a20:	42a3      	cmp	r3, r4
 8002a22:	6025      	str	r5, [r4, #0]
 8002a24:	bf18      	it	ne
 8002a26:	6059      	strne	r1, [r3, #4]
 8002a28:	6863      	ldr	r3, [r4, #4]
 8002a2a:	bf08      	it	eq
 8002a2c:	f8c8 1000 	streq.w	r1, [r8]
 8002a30:	5162      	str	r2, [r4, r5]
 8002a32:	604b      	str	r3, [r1, #4]
 8002a34:	4630      	mov	r0, r6
 8002a36:	f000 f82f 	bl	8002a98 <__malloc_unlock>
 8002a3a:	f104 000b 	add.w	r0, r4, #11
 8002a3e:	1d23      	adds	r3, r4, #4
 8002a40:	f020 0007 	bic.w	r0, r0, #7
 8002a44:	1ac2      	subs	r2, r0, r3
 8002a46:	bf1c      	itt	ne
 8002a48:	1a1b      	subne	r3, r3, r0
 8002a4a:	50a3      	strne	r3, [r4, r2]
 8002a4c:	e7af      	b.n	80029ae <_malloc_r+0x22>
 8002a4e:	6862      	ldr	r2, [r4, #4]
 8002a50:	42a3      	cmp	r3, r4
 8002a52:	bf0c      	ite	eq
 8002a54:	f8c8 2000 	streq.w	r2, [r8]
 8002a58:	605a      	strne	r2, [r3, #4]
 8002a5a:	e7eb      	b.n	8002a34 <_malloc_r+0xa8>
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	6864      	ldr	r4, [r4, #4]
 8002a60:	e7ae      	b.n	80029c0 <_malloc_r+0x34>
 8002a62:	463c      	mov	r4, r7
 8002a64:	687f      	ldr	r7, [r7, #4]
 8002a66:	e7b6      	b.n	80029d6 <_malloc_r+0x4a>
 8002a68:	461a      	mov	r2, r3
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	d1fb      	bne.n	8002a68 <_malloc_r+0xdc>
 8002a70:	2300      	movs	r3, #0
 8002a72:	6053      	str	r3, [r2, #4]
 8002a74:	e7de      	b.n	8002a34 <_malloc_r+0xa8>
 8002a76:	230c      	movs	r3, #12
 8002a78:	6033      	str	r3, [r6, #0]
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	f000 f80c 	bl	8002a98 <__malloc_unlock>
 8002a80:	e794      	b.n	80029ac <_malloc_r+0x20>
 8002a82:	6005      	str	r5, [r0, #0]
 8002a84:	e7d6      	b.n	8002a34 <_malloc_r+0xa8>
 8002a86:	bf00      	nop
 8002a88:	20000268 	.word	0x20000268

08002a8c <__malloc_lock>:
 8002a8c:	4801      	ldr	r0, [pc, #4]	@ (8002a94 <__malloc_lock+0x8>)
 8002a8e:	f7ff bf0f 	b.w	80028b0 <__retarget_lock_acquire_recursive>
 8002a92:	bf00      	nop
 8002a94:	20000260 	.word	0x20000260

08002a98 <__malloc_unlock>:
 8002a98:	4801      	ldr	r0, [pc, #4]	@ (8002aa0 <__malloc_unlock+0x8>)
 8002a9a:	f7ff bf0a 	b.w	80028b2 <__retarget_lock_release_recursive>
 8002a9e:	bf00      	nop
 8002aa0:	20000260 	.word	0x20000260

08002aa4 <__ssputs_r>:
 8002aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa8:	688e      	ldr	r6, [r1, #8]
 8002aaa:	461f      	mov	r7, r3
 8002aac:	42be      	cmp	r6, r7
 8002aae:	680b      	ldr	r3, [r1, #0]
 8002ab0:	4682      	mov	sl, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4690      	mov	r8, r2
 8002ab6:	d82d      	bhi.n	8002b14 <__ssputs_r+0x70>
 8002ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002abc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ac0:	d026      	beq.n	8002b10 <__ssputs_r+0x6c>
 8002ac2:	6965      	ldr	r5, [r4, #20]
 8002ac4:	6909      	ldr	r1, [r1, #16]
 8002ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002aca:	eba3 0901 	sub.w	r9, r3, r1
 8002ace:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ad2:	1c7b      	adds	r3, r7, #1
 8002ad4:	444b      	add	r3, r9
 8002ad6:	106d      	asrs	r5, r5, #1
 8002ad8:	429d      	cmp	r5, r3
 8002ada:	bf38      	it	cc
 8002adc:	461d      	movcc	r5, r3
 8002ade:	0553      	lsls	r3, r2, #21
 8002ae0:	d527      	bpl.n	8002b32 <__ssputs_r+0x8e>
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7ff ff52 	bl	800298c <_malloc_r>
 8002ae8:	4606      	mov	r6, r0
 8002aea:	b360      	cbz	r0, 8002b46 <__ssputs_r+0xa2>
 8002aec:	6921      	ldr	r1, [r4, #16]
 8002aee:	464a      	mov	r2, r9
 8002af0:	f000 fae8 	bl	80030c4 <memcpy>
 8002af4:	89a3      	ldrh	r3, [r4, #12]
 8002af6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002afe:	81a3      	strh	r3, [r4, #12]
 8002b00:	6126      	str	r6, [r4, #16]
 8002b02:	6165      	str	r5, [r4, #20]
 8002b04:	444e      	add	r6, r9
 8002b06:	eba5 0509 	sub.w	r5, r5, r9
 8002b0a:	6026      	str	r6, [r4, #0]
 8002b0c:	60a5      	str	r5, [r4, #8]
 8002b0e:	463e      	mov	r6, r7
 8002b10:	42be      	cmp	r6, r7
 8002b12:	d900      	bls.n	8002b16 <__ssputs_r+0x72>
 8002b14:	463e      	mov	r6, r7
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	4632      	mov	r2, r6
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	f000 faa8 	bl	8003070 <memmove>
 8002b20:	68a3      	ldr	r3, [r4, #8]
 8002b22:	1b9b      	subs	r3, r3, r6
 8002b24:	60a3      	str	r3, [r4, #8]
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	4433      	add	r3, r6
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b32:	462a      	mov	r2, r5
 8002b34:	f000 fad4 	bl	80030e0 <_realloc_r>
 8002b38:	4606      	mov	r6, r0
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d1e0      	bne.n	8002b00 <__ssputs_r+0x5c>
 8002b3e:	6921      	ldr	r1, [r4, #16]
 8002b40:	4650      	mov	r0, sl
 8002b42:	f7ff feb7 	bl	80028b4 <_free_r>
 8002b46:	230c      	movs	r3, #12
 8002b48:	f8ca 3000 	str.w	r3, [sl]
 8002b4c:	89a3      	ldrh	r3, [r4, #12]
 8002b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	e7e9      	b.n	8002b2e <__ssputs_r+0x8a>
	...

08002b5c <_svfiprintf_r>:
 8002b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b60:	4698      	mov	r8, r3
 8002b62:	898b      	ldrh	r3, [r1, #12]
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	b09d      	sub	sp, #116	@ 0x74
 8002b68:	4607      	mov	r7, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	d510      	bpl.n	8002b92 <_svfiprintf_r+0x36>
 8002b70:	690b      	ldr	r3, [r1, #16]
 8002b72:	b973      	cbnz	r3, 8002b92 <_svfiprintf_r+0x36>
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	f7ff ff09 	bl	800298c <_malloc_r>
 8002b7a:	6028      	str	r0, [r5, #0]
 8002b7c:	6128      	str	r0, [r5, #16]
 8002b7e:	b930      	cbnz	r0, 8002b8e <_svfiprintf_r+0x32>
 8002b80:	230c      	movs	r3, #12
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	b01d      	add	sp, #116	@ 0x74
 8002b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8e:	2340      	movs	r3, #64	@ 0x40
 8002b90:	616b      	str	r3, [r5, #20]
 8002b92:	2300      	movs	r3, #0
 8002b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b96:	2320      	movs	r3, #32
 8002b98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ba0:	2330      	movs	r3, #48	@ 0x30
 8002ba2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002d40 <_svfiprintf_r+0x1e4>
 8002ba6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002baa:	f04f 0901 	mov.w	r9, #1
 8002bae:	4623      	mov	r3, r4
 8002bb0:	469a      	mov	sl, r3
 8002bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bb6:	b10a      	cbz	r2, 8002bbc <_svfiprintf_r+0x60>
 8002bb8:	2a25      	cmp	r2, #37	@ 0x25
 8002bba:	d1f9      	bne.n	8002bb0 <_svfiprintf_r+0x54>
 8002bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8002bc0:	d00b      	beq.n	8002bda <_svfiprintf_r+0x7e>
 8002bc2:	465b      	mov	r3, fp
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f7ff ff6b 	bl	8002aa4 <__ssputs_r>
 8002bce:	3001      	adds	r0, #1
 8002bd0:	f000 80a7 	beq.w	8002d22 <_svfiprintf_r+0x1c6>
 8002bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002bd6:	445a      	add	r2, fp
 8002bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002bda:	f89a 3000 	ldrb.w	r3, [sl]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 809f 	beq.w	8002d22 <_svfiprintf_r+0x1c6>
 8002be4:	2300      	movs	r3, #0
 8002be6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bee:	f10a 0a01 	add.w	sl, sl, #1
 8002bf2:	9304      	str	r3, [sp, #16]
 8002bf4:	9307      	str	r3, [sp, #28]
 8002bf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002bfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8002bfc:	4654      	mov	r4, sl
 8002bfe:	2205      	movs	r2, #5
 8002c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c04:	484e      	ldr	r0, [pc, #312]	@ (8002d40 <_svfiprintf_r+0x1e4>)
 8002c06:	f7fd faf3 	bl	80001f0 <memchr>
 8002c0a:	9a04      	ldr	r2, [sp, #16]
 8002c0c:	b9d8      	cbnz	r0, 8002c46 <_svfiprintf_r+0xea>
 8002c0e:	06d0      	lsls	r0, r2, #27
 8002c10:	bf44      	itt	mi
 8002c12:	2320      	movmi	r3, #32
 8002c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c18:	0711      	lsls	r1, r2, #28
 8002c1a:	bf44      	itt	mi
 8002c1c:	232b      	movmi	r3, #43	@ 0x2b
 8002c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c22:	f89a 3000 	ldrb.w	r3, [sl]
 8002c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c28:	d015      	beq.n	8002c56 <_svfiprintf_r+0xfa>
 8002c2a:	9a07      	ldr	r2, [sp, #28]
 8002c2c:	4654      	mov	r4, sl
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f04f 0c0a 	mov.w	ip, #10
 8002c34:	4621      	mov	r1, r4
 8002c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c3a:	3b30      	subs	r3, #48	@ 0x30
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d94b      	bls.n	8002cd8 <_svfiprintf_r+0x17c>
 8002c40:	b1b0      	cbz	r0, 8002c70 <_svfiprintf_r+0x114>
 8002c42:	9207      	str	r2, [sp, #28]
 8002c44:	e014      	b.n	8002c70 <_svfiprintf_r+0x114>
 8002c46:	eba0 0308 	sub.w	r3, r0, r8
 8002c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	9304      	str	r3, [sp, #16]
 8002c52:	46a2      	mov	sl, r4
 8002c54:	e7d2      	b.n	8002bfc <_svfiprintf_r+0xa0>
 8002c56:	9b03      	ldr	r3, [sp, #12]
 8002c58:	1d19      	adds	r1, r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	9103      	str	r1, [sp, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bfbb      	ittet	lt
 8002c62:	425b      	neglt	r3, r3
 8002c64:	f042 0202 	orrlt.w	r2, r2, #2
 8002c68:	9307      	strge	r3, [sp, #28]
 8002c6a:	9307      	strlt	r3, [sp, #28]
 8002c6c:	bfb8      	it	lt
 8002c6e:	9204      	strlt	r2, [sp, #16]
 8002c70:	7823      	ldrb	r3, [r4, #0]
 8002c72:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c74:	d10a      	bne.n	8002c8c <_svfiprintf_r+0x130>
 8002c76:	7863      	ldrb	r3, [r4, #1]
 8002c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c7a:	d132      	bne.n	8002ce2 <_svfiprintf_r+0x186>
 8002c7c:	9b03      	ldr	r3, [sp, #12]
 8002c7e:	1d1a      	adds	r2, r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	9203      	str	r2, [sp, #12]
 8002c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c88:	3402      	adds	r4, #2
 8002c8a:	9305      	str	r3, [sp, #20]
 8002c8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002d50 <_svfiprintf_r+0x1f4>
 8002c90:	7821      	ldrb	r1, [r4, #0]
 8002c92:	2203      	movs	r2, #3
 8002c94:	4650      	mov	r0, sl
 8002c96:	f7fd faab 	bl	80001f0 <memchr>
 8002c9a:	b138      	cbz	r0, 8002cac <_svfiprintf_r+0x150>
 8002c9c:	9b04      	ldr	r3, [sp, #16]
 8002c9e:	eba0 000a 	sub.w	r0, r0, sl
 8002ca2:	2240      	movs	r2, #64	@ 0x40
 8002ca4:	4082      	lsls	r2, r0
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	3401      	adds	r4, #1
 8002caa:	9304      	str	r3, [sp, #16]
 8002cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb0:	4824      	ldr	r0, [pc, #144]	@ (8002d44 <_svfiprintf_r+0x1e8>)
 8002cb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002cb6:	2206      	movs	r2, #6
 8002cb8:	f7fd fa9a 	bl	80001f0 <memchr>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d036      	beq.n	8002d2e <_svfiprintf_r+0x1d2>
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <_svfiprintf_r+0x1ec>)
 8002cc2:	bb1b      	cbnz	r3, 8002d0c <_svfiprintf_r+0x1b0>
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	3307      	adds	r3, #7
 8002cc8:	f023 0307 	bic.w	r3, r3, #7
 8002ccc:	3308      	adds	r3, #8
 8002cce:	9303      	str	r3, [sp, #12]
 8002cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002cd2:	4433      	add	r3, r6
 8002cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cd6:	e76a      	b.n	8002bae <_svfiprintf_r+0x52>
 8002cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cdc:	460c      	mov	r4, r1
 8002cde:	2001      	movs	r0, #1
 8002ce0:	e7a8      	b.n	8002c34 <_svfiprintf_r+0xd8>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	3401      	adds	r4, #1
 8002ce6:	9305      	str	r3, [sp, #20]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f04f 0c0a 	mov.w	ip, #10
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cf4:	3a30      	subs	r2, #48	@ 0x30
 8002cf6:	2a09      	cmp	r2, #9
 8002cf8:	d903      	bls.n	8002d02 <_svfiprintf_r+0x1a6>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0c6      	beq.n	8002c8c <_svfiprintf_r+0x130>
 8002cfe:	9105      	str	r1, [sp, #20]
 8002d00:	e7c4      	b.n	8002c8c <_svfiprintf_r+0x130>
 8002d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d06:	4604      	mov	r4, r0
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e7f0      	b.n	8002cee <_svfiprintf_r+0x192>
 8002d0c:	ab03      	add	r3, sp, #12
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	462a      	mov	r2, r5
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <_svfiprintf_r+0x1f0>)
 8002d14:	a904      	add	r1, sp, #16
 8002d16:	4638      	mov	r0, r7
 8002d18:	f3af 8000 	nop.w
 8002d1c:	1c42      	adds	r2, r0, #1
 8002d1e:	4606      	mov	r6, r0
 8002d20:	d1d6      	bne.n	8002cd0 <_svfiprintf_r+0x174>
 8002d22:	89ab      	ldrh	r3, [r5, #12]
 8002d24:	065b      	lsls	r3, r3, #25
 8002d26:	f53f af2d 	bmi.w	8002b84 <_svfiprintf_r+0x28>
 8002d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d2c:	e72c      	b.n	8002b88 <_svfiprintf_r+0x2c>
 8002d2e:	ab03      	add	r3, sp, #12
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	462a      	mov	r2, r5
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <_svfiprintf_r+0x1f0>)
 8002d36:	a904      	add	r1, sp, #16
 8002d38:	4638      	mov	r0, r7
 8002d3a:	f000 f879 	bl	8002e30 <_printf_i>
 8002d3e:	e7ed      	b.n	8002d1c <_svfiprintf_r+0x1c0>
 8002d40:	0800319c 	.word	0x0800319c
 8002d44:	080031a6 	.word	0x080031a6
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	08002aa5 	.word	0x08002aa5
 8002d50:	080031a2 	.word	0x080031a2

08002d54 <_printf_common>:
 8002d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d58:	4616      	mov	r6, r2
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	688a      	ldr	r2, [r1, #8]
 8002d5e:	690b      	ldr	r3, [r1, #16]
 8002d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bfb8      	it	lt
 8002d68:	4613      	movlt	r3, r2
 8002d6a:	6033      	str	r3, [r6, #0]
 8002d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d70:	4607      	mov	r7, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	b10a      	cbz	r2, 8002d7a <_printf_common+0x26>
 8002d76:	3301      	adds	r3, #1
 8002d78:	6033      	str	r3, [r6, #0]
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	0699      	lsls	r1, r3, #26
 8002d7e:	bf42      	ittt	mi
 8002d80:	6833      	ldrmi	r3, [r6, #0]
 8002d82:	3302      	addmi	r3, #2
 8002d84:	6033      	strmi	r3, [r6, #0]
 8002d86:	6825      	ldr	r5, [r4, #0]
 8002d88:	f015 0506 	ands.w	r5, r5, #6
 8002d8c:	d106      	bne.n	8002d9c <_printf_common+0x48>
 8002d8e:	f104 0a19 	add.w	sl, r4, #25
 8002d92:	68e3      	ldr	r3, [r4, #12]
 8002d94:	6832      	ldr	r2, [r6, #0]
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	42ab      	cmp	r3, r5
 8002d9a:	dc26      	bgt.n	8002dea <_printf_common+0x96>
 8002d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	3b00      	subs	r3, #0
 8002da4:	bf18      	it	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	0692      	lsls	r2, r2, #26
 8002daa:	d42b      	bmi.n	8002e04 <_printf_common+0xb0>
 8002dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002db0:	4641      	mov	r1, r8
 8002db2:	4638      	mov	r0, r7
 8002db4:	47c8      	blx	r9
 8002db6:	3001      	adds	r0, #1
 8002db8:	d01e      	beq.n	8002df8 <_printf_common+0xa4>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	6922      	ldr	r2, [r4, #16]
 8002dbe:	f003 0306 	and.w	r3, r3, #6
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf02      	ittt	eq
 8002dc6:	68e5      	ldreq	r5, [r4, #12]
 8002dc8:	6833      	ldreq	r3, [r6, #0]
 8002dca:	1aed      	subeq	r5, r5, r3
 8002dcc:	68a3      	ldr	r3, [r4, #8]
 8002dce:	bf0c      	ite	eq
 8002dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dd4:	2500      	movne	r5, #0
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	bfc4      	itt	gt
 8002dda:	1a9b      	subgt	r3, r3, r2
 8002ddc:	18ed      	addgt	r5, r5, r3
 8002dde:	2600      	movs	r6, #0
 8002de0:	341a      	adds	r4, #26
 8002de2:	42b5      	cmp	r5, r6
 8002de4:	d11a      	bne.n	8002e1c <_printf_common+0xc8>
 8002de6:	2000      	movs	r0, #0
 8002de8:	e008      	b.n	8002dfc <_printf_common+0xa8>
 8002dea:	2301      	movs	r3, #1
 8002dec:	4652      	mov	r2, sl
 8002dee:	4641      	mov	r1, r8
 8002df0:	4638      	mov	r0, r7
 8002df2:	47c8      	blx	r9
 8002df4:	3001      	adds	r0, #1
 8002df6:	d103      	bne.n	8002e00 <_printf_common+0xac>
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e00:	3501      	adds	r5, #1
 8002e02:	e7c6      	b.n	8002d92 <_printf_common+0x3e>
 8002e04:	18e1      	adds	r1, r4, r3
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	2030      	movs	r0, #48	@ 0x30
 8002e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e0e:	4422      	add	r2, r4
 8002e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e18:	3302      	adds	r3, #2
 8002e1a:	e7c7      	b.n	8002dac <_printf_common+0x58>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4622      	mov	r2, r4
 8002e20:	4641      	mov	r1, r8
 8002e22:	4638      	mov	r0, r7
 8002e24:	47c8      	blx	r9
 8002e26:	3001      	adds	r0, #1
 8002e28:	d0e6      	beq.n	8002df8 <_printf_common+0xa4>
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7d9      	b.n	8002de2 <_printf_common+0x8e>
	...

08002e30 <_printf_i>:
 8002e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	7e0f      	ldrb	r7, [r1, #24]
 8002e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e38:	2f78      	cmp	r7, #120	@ 0x78
 8002e3a:	4691      	mov	r9, r2
 8002e3c:	4680      	mov	r8, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	469a      	mov	sl, r3
 8002e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e46:	d807      	bhi.n	8002e58 <_printf_i+0x28>
 8002e48:	2f62      	cmp	r7, #98	@ 0x62
 8002e4a:	d80a      	bhi.n	8002e62 <_printf_i+0x32>
 8002e4c:	2f00      	cmp	r7, #0
 8002e4e:	f000 80d2 	beq.w	8002ff6 <_printf_i+0x1c6>
 8002e52:	2f58      	cmp	r7, #88	@ 0x58
 8002e54:	f000 80b9 	beq.w	8002fca <_printf_i+0x19a>
 8002e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e60:	e03a      	b.n	8002ed8 <_printf_i+0xa8>
 8002e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e66:	2b15      	cmp	r3, #21
 8002e68:	d8f6      	bhi.n	8002e58 <_printf_i+0x28>
 8002e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8002e70 <_printf_i+0x40>)
 8002e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e70:	08002ec9 	.word	0x08002ec9
 8002e74:	08002edd 	.word	0x08002edd
 8002e78:	08002e59 	.word	0x08002e59
 8002e7c:	08002e59 	.word	0x08002e59
 8002e80:	08002e59 	.word	0x08002e59
 8002e84:	08002e59 	.word	0x08002e59
 8002e88:	08002edd 	.word	0x08002edd
 8002e8c:	08002e59 	.word	0x08002e59
 8002e90:	08002e59 	.word	0x08002e59
 8002e94:	08002e59 	.word	0x08002e59
 8002e98:	08002e59 	.word	0x08002e59
 8002e9c:	08002fdd 	.word	0x08002fdd
 8002ea0:	08002f07 	.word	0x08002f07
 8002ea4:	08002f97 	.word	0x08002f97
 8002ea8:	08002e59 	.word	0x08002e59
 8002eac:	08002e59 	.word	0x08002e59
 8002eb0:	08002fff 	.word	0x08002fff
 8002eb4:	08002e59 	.word	0x08002e59
 8002eb8:	08002f07 	.word	0x08002f07
 8002ebc:	08002e59 	.word	0x08002e59
 8002ec0:	08002e59 	.word	0x08002e59
 8002ec4:	08002f9f 	.word	0x08002f9f
 8002ec8:	6833      	ldr	r3, [r6, #0]
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6032      	str	r2, [r6, #0]
 8002ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e09d      	b.n	8003018 <_printf_i+0x1e8>
 8002edc:	6833      	ldr	r3, [r6, #0]
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	1d19      	adds	r1, r3, #4
 8002ee2:	6031      	str	r1, [r6, #0]
 8002ee4:	0606      	lsls	r6, r0, #24
 8002ee6:	d501      	bpl.n	8002eec <_printf_i+0xbc>
 8002ee8:	681d      	ldr	r5, [r3, #0]
 8002eea:	e003      	b.n	8002ef4 <_printf_i+0xc4>
 8002eec:	0645      	lsls	r5, r0, #25
 8002eee:	d5fb      	bpl.n	8002ee8 <_printf_i+0xb8>
 8002ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ef4:	2d00      	cmp	r5, #0
 8002ef6:	da03      	bge.n	8002f00 <_printf_i+0xd0>
 8002ef8:	232d      	movs	r3, #45	@ 0x2d
 8002efa:	426d      	negs	r5, r5
 8002efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f00:	4859      	ldr	r0, [pc, #356]	@ (8003068 <_printf_i+0x238>)
 8002f02:	230a      	movs	r3, #10
 8002f04:	e011      	b.n	8002f2a <_printf_i+0xfa>
 8002f06:	6821      	ldr	r1, [r4, #0]
 8002f08:	6833      	ldr	r3, [r6, #0]
 8002f0a:	0608      	lsls	r0, r1, #24
 8002f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f10:	d402      	bmi.n	8002f18 <_printf_i+0xe8>
 8002f12:	0649      	lsls	r1, r1, #25
 8002f14:	bf48      	it	mi
 8002f16:	b2ad      	uxthmi	r5, r5
 8002f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f1a:	4853      	ldr	r0, [pc, #332]	@ (8003068 <_printf_i+0x238>)
 8002f1c:	6033      	str	r3, [r6, #0]
 8002f1e:	bf14      	ite	ne
 8002f20:	230a      	movne	r3, #10
 8002f22:	2308      	moveq	r3, #8
 8002f24:	2100      	movs	r1, #0
 8002f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f2a:	6866      	ldr	r6, [r4, #4]
 8002f2c:	60a6      	str	r6, [r4, #8]
 8002f2e:	2e00      	cmp	r6, #0
 8002f30:	bfa2      	ittt	ge
 8002f32:	6821      	ldrge	r1, [r4, #0]
 8002f34:	f021 0104 	bicge.w	r1, r1, #4
 8002f38:	6021      	strge	r1, [r4, #0]
 8002f3a:	b90d      	cbnz	r5, 8002f40 <_printf_i+0x110>
 8002f3c:	2e00      	cmp	r6, #0
 8002f3e:	d04b      	beq.n	8002fd8 <_printf_i+0x1a8>
 8002f40:	4616      	mov	r6, r2
 8002f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f46:	fb03 5711 	mls	r7, r3, r1, r5
 8002f4a:	5dc7      	ldrb	r7, [r0, r7]
 8002f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f50:	462f      	mov	r7, r5
 8002f52:	42bb      	cmp	r3, r7
 8002f54:	460d      	mov	r5, r1
 8002f56:	d9f4      	bls.n	8002f42 <_printf_i+0x112>
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d10b      	bne.n	8002f74 <_printf_i+0x144>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	07df      	lsls	r7, r3, #31
 8002f60:	d508      	bpl.n	8002f74 <_printf_i+0x144>
 8002f62:	6923      	ldr	r3, [r4, #16]
 8002f64:	6861      	ldr	r1, [r4, #4]
 8002f66:	4299      	cmp	r1, r3
 8002f68:	bfde      	ittt	le
 8002f6a:	2330      	movle	r3, #48	@ 0x30
 8002f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f74:	1b92      	subs	r2, r2, r6
 8002f76:	6122      	str	r2, [r4, #16]
 8002f78:	f8cd a000 	str.w	sl, [sp]
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	aa03      	add	r2, sp, #12
 8002f80:	4621      	mov	r1, r4
 8002f82:	4640      	mov	r0, r8
 8002f84:	f7ff fee6 	bl	8002d54 <_printf_common>
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d14a      	bne.n	8003022 <_printf_i+0x1f2>
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	b004      	add	sp, #16
 8002f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	f043 0320 	orr.w	r3, r3, #32
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	4833      	ldr	r0, [pc, #204]	@ (800306c <_printf_i+0x23c>)
 8002fa0:	2778      	movs	r7, #120	@ 0x78
 8002fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	6831      	ldr	r1, [r6, #0]
 8002faa:	061f      	lsls	r7, r3, #24
 8002fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8002fb0:	d402      	bmi.n	8002fb8 <_printf_i+0x188>
 8002fb2:	065f      	lsls	r7, r3, #25
 8002fb4:	bf48      	it	mi
 8002fb6:	b2ad      	uxthmi	r5, r5
 8002fb8:	6031      	str	r1, [r6, #0]
 8002fba:	07d9      	lsls	r1, r3, #31
 8002fbc:	bf44      	itt	mi
 8002fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8002fc2:	6023      	strmi	r3, [r4, #0]
 8002fc4:	b11d      	cbz	r5, 8002fce <_printf_i+0x19e>
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	e7ac      	b.n	8002f24 <_printf_i+0xf4>
 8002fca:	4827      	ldr	r0, [pc, #156]	@ (8003068 <_printf_i+0x238>)
 8002fcc:	e7e9      	b.n	8002fa2 <_printf_i+0x172>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	f023 0320 	bic.w	r3, r3, #32
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	e7f6      	b.n	8002fc6 <_printf_i+0x196>
 8002fd8:	4616      	mov	r6, r2
 8002fda:	e7bd      	b.n	8002f58 <_printf_i+0x128>
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	6825      	ldr	r5, [r4, #0]
 8002fe0:	6961      	ldr	r1, [r4, #20]
 8002fe2:	1d18      	adds	r0, r3, #4
 8002fe4:	6030      	str	r0, [r6, #0]
 8002fe6:	062e      	lsls	r6, r5, #24
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	d501      	bpl.n	8002ff0 <_printf_i+0x1c0>
 8002fec:	6019      	str	r1, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <_printf_i+0x1c6>
 8002ff0:	0668      	lsls	r0, r5, #25
 8002ff2:	d5fb      	bpl.n	8002fec <_printf_i+0x1bc>
 8002ff4:	8019      	strh	r1, [r3, #0]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6123      	str	r3, [r4, #16]
 8002ffa:	4616      	mov	r6, r2
 8002ffc:	e7bc      	b.n	8002f78 <_printf_i+0x148>
 8002ffe:	6833      	ldr	r3, [r6, #0]
 8003000:	1d1a      	adds	r2, r3, #4
 8003002:	6032      	str	r2, [r6, #0]
 8003004:	681e      	ldr	r6, [r3, #0]
 8003006:	6862      	ldr	r2, [r4, #4]
 8003008:	2100      	movs	r1, #0
 800300a:	4630      	mov	r0, r6
 800300c:	f7fd f8f0 	bl	80001f0 <memchr>
 8003010:	b108      	cbz	r0, 8003016 <_printf_i+0x1e6>
 8003012:	1b80      	subs	r0, r0, r6
 8003014:	6060      	str	r0, [r4, #4]
 8003016:	6863      	ldr	r3, [r4, #4]
 8003018:	6123      	str	r3, [r4, #16]
 800301a:	2300      	movs	r3, #0
 800301c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003020:	e7aa      	b.n	8002f78 <_printf_i+0x148>
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	4632      	mov	r2, r6
 8003026:	4649      	mov	r1, r9
 8003028:	4640      	mov	r0, r8
 800302a:	47d0      	blx	sl
 800302c:	3001      	adds	r0, #1
 800302e:	d0ad      	beq.n	8002f8c <_printf_i+0x15c>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	079b      	lsls	r3, r3, #30
 8003034:	d413      	bmi.n	800305e <_printf_i+0x22e>
 8003036:	68e0      	ldr	r0, [r4, #12]
 8003038:	9b03      	ldr	r3, [sp, #12]
 800303a:	4298      	cmp	r0, r3
 800303c:	bfb8      	it	lt
 800303e:	4618      	movlt	r0, r3
 8003040:	e7a6      	b.n	8002f90 <_printf_i+0x160>
 8003042:	2301      	movs	r3, #1
 8003044:	4632      	mov	r2, r6
 8003046:	4649      	mov	r1, r9
 8003048:	4640      	mov	r0, r8
 800304a:	47d0      	blx	sl
 800304c:	3001      	adds	r0, #1
 800304e:	d09d      	beq.n	8002f8c <_printf_i+0x15c>
 8003050:	3501      	adds	r5, #1
 8003052:	68e3      	ldr	r3, [r4, #12]
 8003054:	9903      	ldr	r1, [sp, #12]
 8003056:	1a5b      	subs	r3, r3, r1
 8003058:	42ab      	cmp	r3, r5
 800305a:	dcf2      	bgt.n	8003042 <_printf_i+0x212>
 800305c:	e7eb      	b.n	8003036 <_printf_i+0x206>
 800305e:	2500      	movs	r5, #0
 8003060:	f104 0619 	add.w	r6, r4, #25
 8003064:	e7f5      	b.n	8003052 <_printf_i+0x222>
 8003066:	bf00      	nop
 8003068:	080031ad 	.word	0x080031ad
 800306c:	080031be 	.word	0x080031be

08003070 <memmove>:
 8003070:	4288      	cmp	r0, r1
 8003072:	b510      	push	{r4, lr}
 8003074:	eb01 0402 	add.w	r4, r1, r2
 8003078:	d902      	bls.n	8003080 <memmove+0x10>
 800307a:	4284      	cmp	r4, r0
 800307c:	4623      	mov	r3, r4
 800307e:	d807      	bhi.n	8003090 <memmove+0x20>
 8003080:	1e43      	subs	r3, r0, #1
 8003082:	42a1      	cmp	r1, r4
 8003084:	d008      	beq.n	8003098 <memmove+0x28>
 8003086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800308a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800308e:	e7f8      	b.n	8003082 <memmove+0x12>
 8003090:	4402      	add	r2, r0
 8003092:	4601      	mov	r1, r0
 8003094:	428a      	cmp	r2, r1
 8003096:	d100      	bne.n	800309a <memmove+0x2a>
 8003098:	bd10      	pop	{r4, pc}
 800309a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800309e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030a2:	e7f7      	b.n	8003094 <memmove+0x24>

080030a4 <_sbrk_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4d06      	ldr	r5, [pc, #24]	@ (80030c0 <_sbrk_r+0x1c>)
 80030a8:	2300      	movs	r3, #0
 80030aa:	4604      	mov	r4, r0
 80030ac:	4608      	mov	r0, r1
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	f7fd fcfa 	bl	8000aa8 <_sbrk>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d102      	bne.n	80030be <_sbrk_r+0x1a>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	b103      	cbz	r3, 80030be <_sbrk_r+0x1a>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	2000025c 	.word	0x2000025c

080030c4 <memcpy>:
 80030c4:	440a      	add	r2, r1
 80030c6:	4291      	cmp	r1, r2
 80030c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80030cc:	d100      	bne.n	80030d0 <memcpy+0xc>
 80030ce:	4770      	bx	lr
 80030d0:	b510      	push	{r4, lr}
 80030d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030da:	4291      	cmp	r1, r2
 80030dc:	d1f9      	bne.n	80030d2 <memcpy+0xe>
 80030de:	bd10      	pop	{r4, pc}

080030e0 <_realloc_r>:
 80030e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e4:	4680      	mov	r8, r0
 80030e6:	4615      	mov	r5, r2
 80030e8:	460c      	mov	r4, r1
 80030ea:	b921      	cbnz	r1, 80030f6 <_realloc_r+0x16>
 80030ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030f0:	4611      	mov	r1, r2
 80030f2:	f7ff bc4b 	b.w	800298c <_malloc_r>
 80030f6:	b92a      	cbnz	r2, 8003104 <_realloc_r+0x24>
 80030f8:	f7ff fbdc 	bl	80028b4 <_free_r>
 80030fc:	2400      	movs	r4, #0
 80030fe:	4620      	mov	r0, r4
 8003100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003104:	f000 f81a 	bl	800313c <_malloc_usable_size_r>
 8003108:	4285      	cmp	r5, r0
 800310a:	4606      	mov	r6, r0
 800310c:	d802      	bhi.n	8003114 <_realloc_r+0x34>
 800310e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003112:	d8f4      	bhi.n	80030fe <_realloc_r+0x1e>
 8003114:	4629      	mov	r1, r5
 8003116:	4640      	mov	r0, r8
 8003118:	f7ff fc38 	bl	800298c <_malloc_r>
 800311c:	4607      	mov	r7, r0
 800311e:	2800      	cmp	r0, #0
 8003120:	d0ec      	beq.n	80030fc <_realloc_r+0x1c>
 8003122:	42b5      	cmp	r5, r6
 8003124:	462a      	mov	r2, r5
 8003126:	4621      	mov	r1, r4
 8003128:	bf28      	it	cs
 800312a:	4632      	movcs	r2, r6
 800312c:	f7ff ffca 	bl	80030c4 <memcpy>
 8003130:	4621      	mov	r1, r4
 8003132:	4640      	mov	r0, r8
 8003134:	f7ff fbbe 	bl	80028b4 <_free_r>
 8003138:	463c      	mov	r4, r7
 800313a:	e7e0      	b.n	80030fe <_realloc_r+0x1e>

0800313c <_malloc_usable_size_r>:
 800313c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003140:	1f18      	subs	r0, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfbc      	itt	lt
 8003146:	580b      	ldrlt	r3, [r1, r0]
 8003148:	18c0      	addlt	r0, r0, r3
 800314a:	4770      	bx	lr

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
